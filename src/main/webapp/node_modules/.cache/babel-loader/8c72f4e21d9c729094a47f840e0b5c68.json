{"ast":null,"code":"import _objectSpread from \"/home/ysv/IdeaProjects/site/src/main/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/ysv/IdeaProjects/site/src/main/webapp/src/slick/slider.js\";\n// \"use strict\";\nimport React from \"react\";\nimport { InnerSlider } from \"./inner-slider\"; // \n\nimport json2mq from \"json2mq\";\nimport defaultProps from \"./default-props\";\nimport { canUseDOM } from \"./utils/innerSliderUtils\";\n\nconst enquire = canUseDOM() && require(\"enquire.js\");\n\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.innerSliderRefHandler = ref => this.innerSlider = ref;\n\n    this.slickPrev = () => this.innerSlider.slickPrev();\n\n    this.slickNext = () => this.innerSlider.slickNext();\n\n    this.slickGoTo = (slide, dontAnimate = false) => this.innerSlider.slickGoTo(slide, dontAnimate);\n\n    this.slickPause = () => this.innerSlider.pause(\"paused\");\n\n    this.slickPlay = () => this.innerSlider.autoPlay(\"play\");\n\n    this.state = {\n      breakpoint: null\n    };\n    this._responsiveMediaHandlers = [];\n  }\n\n  media(query, handler) {\n    // javascript handler for  css media query\n    enquire.register(query, handler);\n\n    this._responsiveMediaHandlers.push({\n      query,\n      handler\n    });\n  } // handles responsive breakpoints\n\n\n  componentWillMount() {\n    // performance monitoring\n    //if (process.env.NODE_ENV !== 'production') {\n    //const { whyDidYouUpdate } = require('why-did-you-update')\n    //whyDidYouUpdate(React)\n    //}\n    if (this.props.responsive) {\n      let breakpoints = this.props.responsive.map(breakpt => breakpt.breakpoint); // sort them in increasing order of their numerical value\n\n      breakpoints.sort((x, y) => x - y);\n      breakpoints.forEach((breakpoint, index) => {\n        // media query for each breakpoint\n        let bQuery;\n\n        if (index === 0) {\n          bQuery = json2mq({\n            minWidth: 0,\n            maxWidth: breakpoint\n          });\n        } else {\n          bQuery = json2mq({\n            minWidth: breakpoints[index - 1] + 1,\n            maxWidth: breakpoint\n          });\n        } // when not using server side rendering\n\n\n        canUseDOM() && this.media(bQuery, () => {\n          this.setState({\n            breakpoint: breakpoint\n          });\n        });\n      }); // Register media query for full screen. Need to support resize from small to large\n      // convert javascript object to media query string\n\n      let query = json2mq({\n        minWidth: breakpoints.slice(-1)[0]\n      });\n      canUseDOM() && this.media(query, () => {\n        this.setState({\n          breakpoint: null\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._responsiveMediaHandlers.forEach(function (obj) {\n      enquire.unregister(obj.query, obj.handler);\n    });\n  }\n\n  render() {\n    var settings;\n    var newProps;\n\n    if (this.state.breakpoint) {\n      newProps = this.props.responsive.filter(resp => resp.breakpoint === this.state.breakpoint);\n      settings = newProps[0].settings === \"unslick\" ? \"unslick\" : _objectSpread({}, defaultProps, this.props, newProps[0].settings);\n    } else {\n      settings = _objectSpread({}, defaultProps, this.props);\n    } // force scrolling by one if centerMode is on\n\n\n    if (settings.centerMode) {\n      if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\"slidesToScroll should be equal to 1 in centerMode, you are using \".concat(settings.slidesToScroll));\n      }\n\n      settings.slidesToScroll = 1;\n    } // force showing one slide and scrolling by one if the fade mode is on\n\n\n    if (settings.fade) {\n      if (settings.slidesToShow > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\"slidesToShow should be equal to 1 when fade is true, you're using \".concat(settings.slidesToShow));\n      }\n\n      if (settings.slidesToScroll > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\"slidesToScroll should be equal to 1 when fade is true, you're using \".concat(settings.slidesToScroll));\n      }\n\n      settings.slidesToShow = 1;\n      settings.slidesToScroll = 1;\n    } // makes sure that children is an array, even when there is only 1 child\n\n\n    let children = React.Children.toArray(this.props.children); // Children may contain false or null, so we should filter them\n    // children may also contain string filled with spaces (in certain cases where we use jsx strings)\n\n    children = children.filter(child => {\n      if (typeof child === \"string\") {\n        return !!child.trim();\n      }\n\n      return !!child;\n    }); // rows and slidesPerRow logic is handled here\n\n    if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {\n      console.warn(\"variableWidth is not supported in case of rows > 1 or slidesPerRow > 1\");\n      settings.variableWidth = false;\n    }\n\n    let newChildren = [];\n    let currentWidth = null;\n\n    for (let i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {\n      let newSlide = [];\n\n      for (let j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {\n        let row = [];\n\n        for (let k = j; k < j + settings.slidesPerRow; k += 1) {\n          if (settings.variableWidth && children[k].props.style) {\n            currentWidth = children[k].props.style.width;\n          }\n\n          if (k >= children.length) break;\n          row.push(React.cloneElement(children[k], {\n            key: 100 * i + 10 * j + k,\n            tabIndex: -1,\n            style: {\n              width: \"\".concat(100 / settings.slidesPerRow, \"%\"),\n              display: \"inline-block\"\n            }\n          }));\n        }\n\n        newSlide.push(React.createElement(\"div\", {\n          key: 10 * i + j,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, row));\n      }\n\n      if (settings.variableWidth) {\n        newChildren.push(React.createElement(\"div\", {\n          key: i,\n          style: {\n            width: currentWidth\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, newSlide));\n      } else {\n        newChildren.push(React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, newSlide));\n      }\n    }\n\n    if (settings === \"unslick\") {\n      const className = \"regular slider \" + (this.props.className || \"\");\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, newChildren);\n    } else if (newChildren.length <= settings.slidesToShow) {\n      settings.unslick = true;\n    }\n\n    return React.createElement(InnerSlider, Object.assign({\n      ref: this.innerSliderRefHandler\n    }, settings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), newChildren);\n  }\n\n}","map":{"version":3,"sources":["/home/ysv/IdeaProjects/site/src/main/webapp/src/slick/slider.js"],"names":["React","InnerSlider","json2mq","defaultProps","canUseDOM","enquire","require","Slider","Component","constructor","props","innerSliderRefHandler","ref","innerSlider","slickPrev","slickNext","slickGoTo","slide","dontAnimate","slickPause","pause","slickPlay","autoPlay","state","breakpoint","_responsiveMediaHandlers","media","query","handler","register","push","componentWillMount","responsive","breakpoints","map","breakpt","sort","x","y","forEach","index","bQuery","minWidth","maxWidth","setState","slice","componentWillUnmount","obj","unregister","render","settings","newProps","filter","resp","centerMode","slidesToScroll","process","env","NODE_ENV","console","warn","fade","slidesToShow","children","Children","toArray","child","trim","variableWidth","rows","slidesPerRow","newChildren","currentWidth","i","length","newSlide","j","row","k","style","width","cloneElement","key","tabIndex","display","className","unslick"],"mappings":"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","sourcesContent":["// \"use strict\";\n\nimport React from \"react\";\nimport { InnerSlider } from \"./inner-slider\";  \n// \nimport json2mq from \"json2mq\";\nimport defaultProps from \"./default-props\";\nimport { canUseDOM } from \"./utils/innerSliderUtils\";\nconst enquire = canUseDOM() && require(\"enquire.js\");\n\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakpoint: null\n    };\n    this._responsiveMediaHandlers = [];\n  }\n\n  innerSliderRefHandler = ref => (this.innerSlider = ref);\n\n  media(query, handler) {\n    // javascript handler for  css media query\n    enquire.register(query, handler);\n    this._responsiveMediaHandlers.push({ query, handler });\n  }\n\n  // handles responsive breakpoints\n  componentWillMount() {\n    // performance monitoring\n    //if (process.env.NODE_ENV !== 'production') {\n    //const { whyDidYouUpdate } = require('why-did-you-update')\n    //whyDidYouUpdate(React)\n    //}\n    if (this.props.responsive) {\n      let breakpoints = this.props.responsive.map(\n        breakpt => breakpt.breakpoint\n      );\n      // sort them in increasing order of their numerical value\n      breakpoints.sort((x, y) => x - y);\n\n      breakpoints.forEach((breakpoint, index) => {\n        // media query for each breakpoint\n        let bQuery;\n        if (index === 0) {\n          bQuery = json2mq({ minWidth: 0, maxWidth: breakpoint });\n        } else {\n          bQuery = json2mq({\n            minWidth: breakpoints[index - 1] + 1,\n            maxWidth: breakpoint\n          });\n        }\n        // when not using server side rendering\n        canUseDOM() &&\n          this.media(bQuery, () => {\n            this.setState({ breakpoint: breakpoint });\n          });\n      });\n\n      // Register media query for full screen. Need to support resize from small to large\n      // convert javascript object to media query string\n      let query = json2mq({ minWidth: breakpoints.slice(-1)[0] });\n\n      canUseDOM() &&\n        this.media(query, () => {\n          this.setState({ breakpoint: null });\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    this._responsiveMediaHandlers.forEach(function(obj) {\n      enquire.unregister(obj.query, obj.handler);\n    });\n  }\n\n  slickPrev = () => this.innerSlider.slickPrev();\n\n  slickNext = () => this.innerSlider.slickNext();\n\n  slickGoTo = (slide, dontAnimate = false) =>\n    this.innerSlider.slickGoTo(slide, dontAnimate);\n\n  slickPause = () => this.innerSlider.pause(\"paused\");\n\n  slickPlay = () => this.innerSlider.autoPlay(\"play\");\n\n  render() {\n    var settings;\n    var newProps;\n    if (this.state.breakpoint) {\n      newProps = this.props.responsive.filter(\n        resp => resp.breakpoint === this.state.breakpoint\n      );\n      settings =\n        newProps[0].settings === \"unslick\"\n          ? \"unslick\"\n          : { ...defaultProps, ...this.props, ...newProps[0].settings };\n    } else {\n      settings = { ...defaultProps, ...this.props };\n    }\n\n    // force scrolling by one if centerMode is on\n    if (settings.centerMode) {\n      if (\n        settings.slidesToScroll > 1 &&\n        process.env.NODE_ENV !== \"production\"\n      ) {\n        console.warn(\n          `slidesToScroll should be equal to 1 in centerMode, you are using ${\n            settings.slidesToScroll\n          }`\n        );\n      }\n      settings.slidesToScroll = 1;\n    }\n    // force showing one slide and scrolling by one if the fade mode is on\n    if (settings.fade) {\n      if (settings.slidesToShow > 1 && process.env.NODE_ENV !== \"production\") {\n        console.warn(\n          `slidesToShow should be equal to 1 when fade is true, you're using ${\n            settings.slidesToShow\n          }`\n        );\n      }\n      if (\n        settings.slidesToScroll > 1 &&\n        process.env.NODE_ENV !== \"production\"\n      ) {\n        console.warn(\n          `slidesToScroll should be equal to 1 when fade is true, you're using ${\n            settings.slidesToScroll\n          }`\n        );\n      }\n      settings.slidesToShow = 1;\n      settings.slidesToScroll = 1;\n    }\n\n    // makes sure that children is an array, even when there is only 1 child\n    let children = React.Children.toArray(this.props.children);\n\n    // Children may contain false or null, so we should filter them\n    // children may also contain string filled with spaces (in certain cases where we use jsx strings)\n    children = children.filter(child => {\n      if (typeof child === \"string\") {\n        return !!child.trim();\n      }\n      return !!child;\n    });\n\n    // rows and slidesPerRow logic is handled here\n    if (\n      settings.variableWidth &&\n      (settings.rows > 1 || settings.slidesPerRow > 1)\n    ) {\n      console.warn(\n        `variableWidth is not supported in case of rows > 1 or slidesPerRow > 1`\n      );\n      settings.variableWidth = false;\n    }\n    let newChildren = [];\n    let currentWidth = null;\n    for (\n      let i = 0;\n      i < children.length;\n      i += settings.rows * settings.slidesPerRow\n    ) {\n      let newSlide = [];\n      for (\n        let j = i;\n        j < i + settings.rows * settings.slidesPerRow;\n        j += settings.slidesPerRow\n      ) {\n        let row = [];\n        for (let k = j; k < j + settings.slidesPerRow; k += 1) {\n          if (settings.variableWidth && children[k].props.style) {\n            currentWidth = children[k].props.style.width;\n          }\n          if (k >= children.length) break;\n          row.push(\n            React.cloneElement(children[k], {\n              key: 100 * i + 10 * j + k,\n              tabIndex: -1,\n              style: {\n                width: `${100 / settings.slidesPerRow}%`,\n                display: \"inline-block\"\n              }\n            })\n          );\n        }\n        newSlide.push(<div key={10 * i + j}>{row}</div>);\n      }\n      if (settings.variableWidth) {\n        newChildren.push(\n          <div key={i} style={{ width: currentWidth }}>\n            {newSlide}\n          </div>\n        );\n      } else {\n        newChildren.push(<div key={i}>{newSlide}</div>);\n      }\n    }\n\n    if (settings === \"unslick\") {\n      const className = \"regular slider \" + (this.props.className || \"\");\n      return <div className={className}>{newChildren}</div>;\n    } else if (newChildren.length <= settings.slidesToShow) {\n      settings.unslick = true;\n    }\n    return (\n      <InnerSlider ref={this.innerSliderRefHandler} {...settings}>\n        {newChildren}\n      </InnerSlider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}