{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutProperties from \"/home/ysv/IdeaProjects/site/src/main/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/ysv/IdeaProjects/site/src/main/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/ysv/IdeaProjects/site/src/main/webapp/src/slick/inner-slider.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initialState from \"./initial-state\";\nimport debounce from \"lodash.debounce\";\nimport classnames from \"classnames\";\nimport { getOnDemandLazySlides, extractObject, initializedState, getHeight, canGoNext, slideHandler, changeSlide, keyHandler, swipeStart, swipeMove, swipeEnd, getPreClones, getPostClones, getTrackLeft, getTrackCSS } from \"./utils/innerSliderUtils\";\nimport { Track } from \"./track\";\nimport { Dots } from \"./dots\";\nimport { PrevArrow, NextArrow } from \"./arrows\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport class InnerSlider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.listRefHandler = ref => this.list = ref;\n\n    this.trackRefHandler = ref => this.track = ref;\n\n    this.adaptHeight = () => {\n      if (this.props.adaptiveHeight && this.list) {\n        const elem = this.list.querySelector(\"[data-index=\\\"\".concat(this.state.currentSlide, \"\\\"]\"));\n        this.list.style.height = getHeight(elem) + \"px\";\n      }\n    };\n\n    this.componentWillMount = () => {\n      this.ssrInit();\n      this.props.onInit && this.props.onInit();\n\n      if (this.props.lazyLoad) {\n        let slidesToLoad = getOnDemandLazySlides(_objectSpread({}, this.props, this.state));\n\n        if (slidesToLoad.length > 0) {\n          this.setState(prevState => ({\n            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n          }));\n\n          if (this.props.onLazyLoad) {\n            this.props.onLazyLoad(slidesToLoad);\n          }\n        }\n      }\n    };\n\n    this.componentDidMount = () => {\n      let spec = _objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, this.props);\n\n      this.updateState(spec, true, () => {\n        this.adaptHeight();\n        this.props.autoplay && this.autoPlay(\"update\");\n      });\n\n      if (this.props.lazyLoad === \"progressive\") {\n        this.lazyLoadTimer = setInterval(this.progressiveLazyLoad, 1000);\n      }\n\n      this.ro = new ResizeObserver(() => {\n        if (this.state.animating) {\n          this.onWindowResized(false); // don't set trackStyle hence don't break animation\n\n          this.callbackTimers.push(setTimeout(() => this.onWindowResized(), this.props.speed));\n        } else {\n          this.onWindowResized();\n        }\n      });\n      this.ro.observe(this.list);\n      Array.prototype.forEach.call(document.querySelectorAll(\".slick-slide\"), slide => {\n        slide.onfocus = this.props.pauseOnFocus ? this.onSlideFocus : null;\n        slide.onblur = this.props.pauseOnFocus ? this.onSlideBlur : null;\n      }); // To support server-side rendering\n\n      if (!window) {\n        return;\n      }\n\n      if (window.addEventListener) {\n        window.addEventListener(\"resize\", this.onWindowResized);\n      } else {\n        window.attachEvent(\"onresize\", this.onWindowResized);\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      if (this.animationEndCallback) {\n        clearTimeout(this.animationEndCallback);\n      }\n\n      if (this.lazyLoadTimer) {\n        clearInterval(this.lazyLoadTimer);\n      }\n\n      if (this.callbackTimers.length) {\n        this.callbackTimers.forEach(timer => clearTimeout(timer));\n        this.callbackTimers = [];\n      }\n\n      if (window.addEventListener) {\n        window.removeEventListener(\"resize\", this.onWindowResized);\n      } else {\n        window.detachEvent(\"onresize\", this.onWindowResized);\n      }\n\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n      }\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      let spec = _objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, nextProps, this.state);\n\n      let setTrackStyle = false;\n\n      for (let key of Object.keys(this.props)) {\n        if (!nextProps.hasOwnProperty(key)) {\n          setTrackStyle = true;\n          break;\n        }\n\n        if (typeof nextProps[key] === \"object\" || typeof nextProps[key] === \"function\") {\n          continue;\n        }\n\n        if (nextProps[key] !== this.props[key]) {\n          setTrackStyle = true;\n          break;\n        }\n      }\n\n      this.updateState(spec, setTrackStyle, () => {\n        if (this.state.currentSlide >= React.Children.count(nextProps.children)) {\n          this.changeSlide({\n            message: \"index\",\n            index: React.Children.count(nextProps.children) - nextProps.slidesToShow,\n            currentSlide: this.state.currentSlide\n          });\n        }\n\n        if (nextProps.autoplay) {\n          this.autoPlay(\"update\");\n        } else {\n          this.pause(\"paused\");\n        }\n      });\n    };\n\n    this.componentDidUpdate = () => {\n      this.checkImagesLoad();\n      this.props.onReInit && this.props.onReInit();\n\n      if (this.props.lazyLoad) {\n        let slidesToLoad = getOnDemandLazySlides(_objectSpread({}, this.props, this.state));\n\n        if (slidesToLoad.length > 0) {\n          this.setState(prevState => ({\n            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n          }));\n\n          if (this.props.onLazyLoad) {\n            this.props.onLazyLoad(slidesToLoad);\n          }\n        }\n      } // if (this.props.onLazyLoad) {\n      //   this.props.onLazyLoad([leftMostSlide])\n      // }\n\n\n      this.adaptHeight();\n    };\n\n    this.onWindowResized = setTrackStyle => {\n      if (this.debouncedResize) this.debouncedResize.cancel();\n      this.debouncedResize = debounce(() => this.resizeWindow(setTrackStyle), 50);\n      this.debouncedResize();\n    };\n\n    this.resizeWindow = (setTrackStyle = true) => {\n      if (!ReactDOM.findDOMNode(this.track)) return;\n\n      let spec = _objectSpread({\n        listRef: this.list,\n        trackRef: this.track\n      }, this.props, this.state);\n\n      this.updateState(spec, setTrackStyle, () => {\n        if (this.props.autoplay) this.autoPlay(\"update\");else this.pause(\"paused\");\n      }); // animating state should be cleared while resizing, otherwise autoplay stops working\n\n      this.setState({\n        animating: false\n      });\n      clearTimeout(this.animationEndCallback);\n      delete this.animationEndCallback;\n    };\n\n    this.updateState = (spec, setTrackStyle, callback) => {\n      let updatedState = initializedState(spec);\n      spec = _objectSpread({}, spec, updatedState, {\n        slideIndex: updatedState.currentSlide\n      });\n      let targetLeft = getTrackLeft(spec);\n      spec = _objectSpread({}, spec, {\n        left: targetLeft\n      });\n      let trackStyle = getTrackCSS(spec);\n\n      if (setTrackStyle || React.Children.count(this.props.children) !== React.Children.count(spec.children)) {\n        updatedState[\"trackStyle\"] = trackStyle;\n      }\n\n      this.setState(updatedState, callback);\n    };\n\n    this.ssrInit = () => {\n      if (this.props.variableWidth) {\n        let trackWidth = 0,\n            trackLeft = 0;\n        let childrenWidths = [];\n        let preClones = getPreClones(_objectSpread({}, this.props, this.state, {\n          slideCount: this.props.children.length\n        }));\n        let postClones = getPostClones(_objectSpread({}, this.props, this.state, {\n          slideCount: this.props.children.length\n        }));\n        this.props.children.forEach(child => {\n          childrenWidths.push(child.props.style.width);\n          trackWidth += child.props.style.width;\n        });\n\n        for (let i = 0; i < preClones; i++) {\n          trackLeft += childrenWidths[childrenWidths.length - 1 - i];\n          trackWidth += childrenWidths[childrenWidths.length - 1 - i];\n        }\n\n        for (let i = 0; i < postClones; i++) {\n          trackWidth += childrenWidths[i];\n        }\n\n        for (let i = 0; i < this.state.currentSlide; i++) {\n          trackLeft += childrenWidths[i];\n        }\n\n        let trackStyle = {\n          width: trackWidth + \"px\",\n          left: -trackLeft + \"px\"\n        };\n\n        if (this.props.centerMode) {\n          let currentWidth = \"\".concat(childrenWidths[this.state.currentSlide], \"px\");\n          trackStyle.left = \"calc(\".concat(trackStyle.left, \" + (100% - \").concat(currentWidth, \") / 2 ) \");\n        }\n\n        this.setState({\n          trackStyle\n        });\n        return;\n      }\n\n      let childrenCount = React.Children.count(this.props.children);\n\n      const spec = _objectSpread({}, this.props, this.state, {\n        slideCount: childrenCount\n      });\n\n      let slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;\n      let trackWidth = 100 / this.props.slidesToShow * slideCount;\n      let slideWidth = 100 / slideCount;\n      let trackLeft = -slideWidth * (getPreClones(spec) + this.state.currentSlide) * trackWidth / 100;\n\n      if (this.props.centerMode) {\n        trackLeft += (100 - slideWidth * trackWidth / 100) / 2;\n      }\n\n      let trackStyle = {\n        width: trackWidth + \"%\",\n        left: trackLeft + \"%\"\n      };\n      this.setState({\n        slideWidth: slideWidth + \"%\",\n        trackStyle: trackStyle\n      });\n    };\n\n    this.checkImagesLoad = () => {\n      let images = document.querySelectorAll(\".slick-slide img\");\n      let imagesCount = images.length,\n          loadedCount = 0;\n      Array.prototype.forEach.call(images, image => {\n        const handler = () => ++loadedCount && loadedCount >= imagesCount && this.onWindowResized();\n\n        if (!image.onclick) {\n          image.onclick = () => image.parentNode.focus();\n        } else {\n          const prevClickHandler = image.onclick;\n\n          image.onclick = () => {\n            prevClickHandler();\n            image.parentNode.focus();\n          };\n        }\n\n        if (!image.onload) {\n          if (this.props.lazyLoad) {\n            image.onload = () => {\n              this.adaptHeight();\n              this.callbackTimers.push(setTimeout(this.onWindowResized, this.props.speed));\n            };\n          } else {\n            image.onload = handler;\n\n            image.onerror = () => {\n              handler();\n              this.props.onLazyLoadError && this.props.onLazyLoadError();\n            };\n          }\n        }\n      });\n    };\n\n    this.progressiveLazyLoad = () => {\n      let slidesToLoad = [];\n\n      const spec = _objectSpread({}, this.props, this.state);\n\n      for (let index = this.state.currentSlide; index < this.state.slideCount + getPostClones(spec); index++) {\n        if (this.state.lazyLoadedList.indexOf(index) < 0) {\n          slidesToLoad.push(index);\n          break;\n        }\n      }\n\n      for (let index = this.state.currentSlide - 1; index >= -getPreClones(spec); index--) {\n        if (this.state.lazyLoadedList.indexOf(index) < 0) {\n          slidesToLoad.push(index);\n          break;\n        }\n      }\n\n      if (slidesToLoad.length > 0) {\n        this.setState(state => ({\n          lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)\n        }));\n\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad);\n        }\n      } else {\n        if (this.lazyLoadTimer) {\n          clearInterval(this.lazyLoadTimer);\n          delete this.lazyLoadTimer;\n        }\n      }\n    };\n\n    this.slideHandler = (index, dontAnimate = false) => {\n      const _this$props = this.props,\n            asNavFor = _this$props.asNavFor,\n            beforeChange = _this$props.beforeChange,\n            onLazyLoad = _this$props.onLazyLoad,\n            speed = _this$props.speed,\n            afterChange = _this$props.afterChange; // capture currentslide before state is updated\n\n      const currentSlide = this.state.currentSlide;\n\n      let _slideHandler = slideHandler(_objectSpread({\n        index\n      }, this.props, this.state, {\n        trackRef: this.track,\n        useCSS: this.props.useCSS && !dontAnimate\n      })),\n          state = _slideHandler.state,\n          nextState = _slideHandler.nextState;\n\n      if (!state) return;\n      beforeChange && beforeChange(currentSlide, state.currentSlide);\n      let slidesToLoad = state.lazyLoadedList.filter(value => this.state.lazyLoadedList.indexOf(value) < 0);\n      onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);\n      this.setState(state, () => {\n        asNavFor && asNavFor.innerSlider.slideHandler(index);\n        if (!nextState) return;\n        this.animationEndCallback = setTimeout(() => {\n          const animating = nextState.animating,\n                firstBatch = _objectWithoutProperties(nextState, [\"animating\"]);\n\n          this.setState(firstBatch, () => {\n            this.callbackTimers.push(setTimeout(() => this.setState({\n              animating\n            }), 10));\n            afterChange && afterChange(state.currentSlide);\n            delete this.animationEndCallback;\n          });\n        }, speed);\n      });\n    };\n\n    this.changeSlide = (options, dontAnimate = false) => {\n      const spec = _objectSpread({}, this.props, this.state);\n\n      let targetSlide = changeSlide(spec, options);\n      if (targetSlide !== 0 && !targetSlide) return;\n\n      if (dontAnimate === true) {\n        this.slideHandler(targetSlide, dontAnimate);\n      } else {\n        this.slideHandler(targetSlide);\n      }\n    };\n\n    this.clickHandler = e => {\n      if (this.clickable === false) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      this.clickable = true;\n    };\n\n    this.keyHandler = e => {\n      let dir = keyHandler(e, this.props.accessibility, this.props.rtl);\n      dir !== \"\" && this.changeSlide({\n        message: dir\n      });\n    };\n\n    this.selectHandler = options => {\n      this.changeSlide(options);\n    };\n\n    this.disableBodyScroll = () => {\n      const preventDefault = e => {\n        e = e || window.event;\n        if (e.preventDefault) e.preventDefault();\n        e.returnValue = false;\n      };\n\n      window.ontouchmove = preventDefault;\n    };\n\n    this.enableBodyScroll = () => {\n      window.ontouchmove = null;\n    };\n\n    this.swipeStart = e => {\n      if (this.props.verticalSwiping) {\n        this.disableBodyScroll();\n      }\n\n      let state = swipeStart(e, this.props.swipe, this.props.draggable);\n      state !== \"\" && this.setState(state);\n    };\n\n    this.swipeMove = e => {\n      let state = swipeMove(e, _objectSpread({}, this.props, this.state, {\n        trackRef: this.track,\n        listRef: this.list,\n        slideIndex: this.state.currentSlide\n      }));\n      if (!state) return;\n\n      if (state[\"swiping\"]) {\n        this.clickable = false;\n      }\n\n      this.setState(state);\n    };\n\n    this.swipeEnd = e => {\n      let state = swipeEnd(e, _objectSpread({}, this.props, this.state, {\n        trackRef: this.track,\n        listRef: this.list,\n        slideIndex: this.state.currentSlide\n      }));\n      if (!state) return;\n      let triggerSlideHandler = state[\"triggerSlideHandler\"];\n      delete state[\"triggerSlideHandler\"];\n      this.setState(state);\n      if (triggerSlideHandler === undefined) return;\n      this.slideHandler(triggerSlideHandler);\n\n      if (this.props.verticalSwiping) {\n        this.enableBodyScroll();\n      }\n    };\n\n    this.slickPrev = () => {\n      // this and fellow methods are wrapped in setTimeout\n      // to make sure initialize setState has happened before\n      // any of such methods are called\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"previous\"\n      }), 0));\n    };\n\n    this.slickNext = () => {\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"next\"\n      }), 0));\n    };\n\n    this.slickGoTo = (slide, dontAnimate = false) => {\n      slide = Number(slide);\n      if (isNaN(slide)) return \"\";\n      this.callbackTimers.push(setTimeout(() => this.changeSlide({\n        message: \"index\",\n        index: slide,\n        currentSlide: this.state.currentSlide\n      }, dontAnimate), 0));\n    };\n\n    this.play = () => {\n      var nextIndex;\n\n      if (this.props.rtl) {\n        nextIndex = this.state.currentSlide - this.props.slidesToScroll;\n      } else {\n        if (canGoNext(_objectSpread({}, this.props, this.state))) {\n          nextIndex = this.state.currentSlide + this.props.slidesToScroll;\n        } else {\n          return false;\n        }\n      }\n\n      this.slideHandler(nextIndex);\n    };\n\n    this.autoPlay = playType => {\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n      }\n\n      const autoplaying = this.state.autoplaying;\n\n      if (playType === \"update\") {\n        if (autoplaying === \"hovered\" || autoplaying === \"focused\" || autoplaying === \"paused\") {\n          return;\n        }\n      } else if (playType === \"leave\") {\n        if (autoplaying === \"paused\" || autoplaying === \"focused\") {\n          return;\n        }\n      } else if (playType === \"blur\") {\n        if (autoplaying === \"paused\" || autoplaying === \"hovered\") {\n          return;\n        }\n      }\n\n      this.autoplayTimer = setInterval(this.play, this.props.autoplaySpeed + 50);\n      this.setState({\n        autoplaying: \"playing\"\n      });\n    };\n\n    this.pause = pauseType => {\n      if (this.autoplayTimer) {\n        clearInterval(this.autoplayTimer);\n        this.autoplayTimer = null;\n      }\n\n      const autoplaying = this.state.autoplaying;\n\n      if (pauseType === \"paused\") {\n        this.setState({\n          autoplaying: \"paused\"\n        });\n      } else if (pauseType === \"focused\") {\n        if (autoplaying === \"hovered\" || autoplaying === \"playing\") {\n          this.setState({\n            autoplaying: \"focused\"\n          });\n        }\n      } else {\n        // pauseType  is 'hovered'\n        if (autoplaying === \"playing\") {\n          this.setState({\n            autoplaying: \"hovered\"\n          });\n        }\n      }\n    };\n\n    this.onDotsOver = () => this.props.autoplay && this.pause(\"hovered\");\n\n    this.onDotsLeave = () => this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\");\n\n    this.onTrackOver = () => this.props.autoplay && this.pause(\"hovered\");\n\n    this.onTrackLeave = () => this.props.autoplay && this.state.autoplaying === \"hovered\" && this.autoPlay(\"leave\");\n\n    this.onSlideFocus = () => this.props.autoplay && this.pause(\"focused\");\n\n    this.onSlideBlur = () => this.props.autoplay && this.state.autoplaying === \"focused\" && this.autoPlay(\"blur\");\n\n    this.render = () => {\n      var className = classnames(\"slick-slider\", this.props.className, {\n        \"slick-vertical\": this.props.vertical,\n        \"slick-initialized\": true\n      });\n\n      let spec = _objectSpread({}, this.props, this.state);\n\n      let trackProps = extractObject(spec, [\"fade\", \"cssEase\", \"speed\", \"infinite\", \"centerMode\", \"focusOnSelect\", \"currentSlide\", \"lazyLoad\", \"lazyLoadedList\", \"rtl\", \"slideWidth\", \"slideHeight\", \"listHeight\", \"vertical\", \"slidesToShow\", \"slidesToScroll\", \"slideCount\", \"trackStyle\", \"variableWidth\", \"unslick\", \"centerPadding\"]);\n      const pauseOnHover = this.props.pauseOnHover;\n      trackProps = _objectSpread({}, trackProps, {\n        onMouseEnter: pauseOnHover ? this.onTrackOver : null,\n        onMouseLeave: pauseOnHover ? this.onTrackLeave : null,\n        onMouseOver: pauseOnHover ? this.onTrackOver : null,\n        focusOnSelect: this.props.focusOnSelect ? this.selectHandler : null\n      });\n      var dots;\n\n      if (this.props.dots === true && this.state.slideCount >= this.props.slidesToShow) {\n        let dotProps = extractObject(spec, [\"dotsClass\", \"slideCount\", \"slidesToShow\", \"currentSlide\", \"slidesToScroll\", \"clickHandler\", \"children\", \"customPaging\", \"infinite\", \"appendDots\"]);\n        const pauseOnDotsHover = this.props.pauseOnDotsHover;\n        dotProps = _objectSpread({}, dotProps, {\n          clickHandler: this.changeSlide,\n          onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,\n          onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,\n          onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null\n        });\n        dots = React.createElement(Dots, Object.assign({}, dotProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 651\n          },\n          __self: this\n        }));\n      }\n\n      var prevArrow, nextArrow;\n      let arrowProps = extractObject(spec, [\"infinite\", \"centerMode\", \"currentSlide\", \"slideCount\", \"slidesToShow\", \"prevArrow\", \"nextArrow\"]);\n      arrowProps.clickHandler = this.changeSlide;\n\n      if (this.props.arrows) {\n        prevArrow = React.createElement(PrevArrow, Object.assign({}, arrowProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 667\n          },\n          __self: this\n        }));\n        nextArrow = React.createElement(NextArrow, Object.assign({}, arrowProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 668\n          },\n          __self: this\n        }));\n      }\n\n      var verticalHeightStyle = null;\n\n      if (this.props.vertical) {\n        verticalHeightStyle = {\n          height: this.state.listHeight\n        };\n      }\n\n      var centerPaddingStyle = null;\n\n      if (this.props.vertical === false) {\n        if (this.props.centerMode === true) {\n          centerPaddingStyle = {\n            padding: \"0px \" + this.props.centerPadding\n          };\n        }\n      } else {\n        if (this.props.centerMode === true) {\n          centerPaddingStyle = {\n            padding: this.props.centerPadding + \" 0px\"\n          };\n        }\n      }\n\n      const listStyle = _objectSpread({}, verticalHeightStyle, centerPaddingStyle);\n\n      const touchMove = this.props.touchMove;\n      let listProps = {\n        className: \"slick-list\",\n        style: listStyle,\n        onClick: this.clickHandler,\n        onMouseDown: touchMove ? this.swipeStart : null,\n        onMouseMove: this.state.dragging && touchMove ? this.swipeMove : null,\n        onMouseUp: touchMove ? this.swipeEnd : null,\n        onMouseLeave: this.state.dragging && touchMove ? this.swipeEnd : null,\n        onTouchStart: touchMove ? this.swipeStart : null,\n        onTouchMove: this.state.dragging && touchMove ? this.swipeMove : null,\n        onTouchEnd: touchMove ? this.swipeEnd : null,\n        onTouchCancel: this.state.dragging && touchMove ? this.swipeEnd : null,\n        onKeyDown: this.props.accessibility ? this.keyHandler : null\n      };\n      let innerSliderProps = {\n        className: className,\n        dir: \"ltr\"\n      };\n\n      if (this.props.unslick) {\n        listProps = {\n          className: \"slick-list\"\n        };\n        innerSliderProps = {\n          className\n        };\n      }\n\n      return React.createElement(\"div\", Object.assign({}, innerSliderProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722\n        },\n        __self: this\n      }), !this.props.unslick ? prevArrow : \"\", React.createElement(\"div\", Object.assign({\n        ref: this.listRefHandler\n      }, listProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724\n        },\n        __self: this\n      }), React.createElement(Track, Object.assign({\n        ref: this.trackRefHandler\n      }, trackProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725\n        },\n        __self: this\n      }), this.props.children)), !this.props.unslick ? nextArrow : \"\", !this.props.unslick ? dots : \"\");\n    };\n\n    this.list = null;\n    this.track = null;\n    this.state = _objectSpread({}, initialState, {\n      currentSlide: this.props.initialSlide,\n      slideCount: React.Children.count(this.props.children)\n    });\n    this.callbackTimers = [];\n    this.clickable = true;\n    this.debouncedResize = null;\n  }\n\n}","map":{"version":3,"sources":["/home/ysv/IdeaProjects/site/src/main/webapp/src/slick/inner-slider.js"],"names":["React","ReactDOM","initialState","debounce","classnames","getOnDemandLazySlides","extractObject","initializedState","getHeight","canGoNext","slideHandler","changeSlide","keyHandler","swipeStart","swipeMove","swipeEnd","getPreClones","getPostClones","getTrackLeft","getTrackCSS","Track","Dots","PrevArrow","NextArrow","ResizeObserver","InnerSlider","Component","constructor","props","listRefHandler","ref","list","trackRefHandler","track","adaptHeight","adaptiveHeight","elem","querySelector","state","currentSlide","style","height","componentWillMount","ssrInit","onInit","lazyLoad","slidesToLoad","length","setState","prevState","lazyLoadedList","concat","onLazyLoad","componentDidMount","spec","listRef","trackRef","updateState","autoplay","autoPlay","lazyLoadTimer","setInterval","progressiveLazyLoad","ro","animating","onWindowResized","callbackTimers","push","setTimeout","speed","observe","Array","prototype","forEach","call","document","querySelectorAll","slide","onfocus","pauseOnFocus","onSlideFocus","onblur","onSlideBlur","window","addEventListener","attachEvent","componentWillUnmount","animationEndCallback","clearTimeout","clearInterval","timer","removeEventListener","detachEvent","autoplayTimer","componentWillReceiveProps","nextProps","setTrackStyle","key","Object","keys","hasOwnProperty","Children","count","children","message","index","slidesToShow","pause","componentDidUpdate","checkImagesLoad","onReInit","debouncedResize","cancel","resizeWindow","findDOMNode","callback","updatedState","slideIndex","targetLeft","left","trackStyle","variableWidth","trackWidth","trackLeft","childrenWidths","preClones","slideCount","postClones","child","width","i","centerMode","currentWidth","childrenCount","slideWidth","images","imagesCount","loadedCount","image","handler","onclick","parentNode","focus","prevClickHandler","onload","onerror","onLazyLoadError","indexOf","dontAnimate","asNavFor","beforeChange","afterChange","useCSS","nextState","filter","value","innerSlider","firstBatch","options","targetSlide","clickHandler","e","clickable","stopPropagation","preventDefault","dir","accessibility","rtl","selectHandler","disableBodyScroll","event","returnValue","ontouchmove","enableBodyScroll","verticalSwiping","swipe","draggable","triggerSlideHandler","undefined","slickPrev","slickNext","slickGoTo","Number","isNaN","play","nextIndex","slidesToScroll","playType","autoplaying","autoplaySpeed","pauseType","onDotsOver","onDotsLeave","onTrackOver","onTrackLeave","render","className","vertical","trackProps","pauseOnHover","onMouseEnter","onMouseLeave","onMouseOver","focusOnSelect","dots","dotProps","pauseOnDotsHover","prevArrow","nextArrow","arrowProps","arrows","verticalHeightStyle","listHeight","centerPaddingStyle","padding","centerPadding","listStyle","touchMove","listProps","onClick","onMouseDown","onMouseMove","dragging","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","onKeyDown","innerSliderProps","unslick","initialSlide"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initialState from \"./initial-state\";\nimport debounce from \"lodash.debounce\";\nimport classnames from \"classnames\";\nimport {\n  getOnDemandLazySlides,\n  extractObject,\n  initializedState,\n  getHeight,\n  canGoNext,\n  slideHandler,\n  changeSlide,\n  keyHandler,\n  swipeStart,\n  swipeMove,\n  swipeEnd,\n  getPreClones,\n  getPostClones,\n  getTrackLeft,\n  getTrackCSS\n} from \"./utils/innerSliderUtils\";\n\nimport { Track } from \"./track\";\nimport { Dots } from \"./dots\";\nimport { PrevArrow, NextArrow } from \"./arrows\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport class InnerSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.list = null;\n    this.track = null;\n    this.state = {\n      ...initialState,\n      currentSlide: this.props.initialSlide,\n      slideCount: React.Children.count(this.props.children)\n    };\n    this.callbackTimers = [];\n    this.clickable = true;\n    this.debouncedResize = null;\n  }\n  listRefHandler = ref => (this.list = ref);\n  trackRefHandler = ref => (this.track = ref);\n  adaptHeight = () => {\n    if (this.props.adaptiveHeight && this.list) {\n      const elem = this.list.querySelector(\n        `[data-index=\"${this.state.currentSlide}\"]`\n      );\n      this.list.style.height = getHeight(elem) + \"px\";\n    }\n  };\n  componentWillMount = () => {\n    this.ssrInit();\n    this.props.onInit && this.props.onInit();\n    if (this.props.lazyLoad) {\n      let slidesToLoad = getOnDemandLazySlides({\n        ...this.props,\n        ...this.state\n      });\n      if (slidesToLoad.length > 0) {\n        this.setState(prevState => ({\n          lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n        }));\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad);\n        }\n      }\n    }\n  };\n  componentDidMount = () => {\n    let spec = { listRef: this.list, trackRef: this.track, ...this.props };\n    this.updateState(spec, true, () => {\n      this.adaptHeight();\n      this.props.autoplay && this.autoPlay(\"update\");\n    });\n    if (this.props.lazyLoad === \"progressive\") {\n      this.lazyLoadTimer = setInterval(this.progressiveLazyLoad, 1000);\n    }\n    this.ro = new ResizeObserver(() => {\n      if (this.state.animating) {\n        this.onWindowResized(false); // don't set trackStyle hence don't break animation\n        this.callbackTimers.push(\n          setTimeout(() => this.onWindowResized(), this.props.speed)\n        );\n      } else {\n        this.onWindowResized();\n      }\n    });\n    this.ro.observe(this.list);\n    Array.prototype.forEach.call(\n      document.querySelectorAll(\".slick-slide\"),\n      slide => {\n        slide.onfocus = this.props.pauseOnFocus ? this.onSlideFocus : null;\n        slide.onblur = this.props.pauseOnFocus ? this.onSlideBlur : null;\n      }\n    );\n    // To support server-side rendering\n    if (!window) {\n      return;\n    }\n    if (window.addEventListener) {\n      window.addEventListener(\"resize\", this.onWindowResized);\n    } else {\n      window.attachEvent(\"onresize\", this.onWindowResized);\n    }\n  };\n  componentWillUnmount = () => {\n    if (this.animationEndCallback) {\n      clearTimeout(this.animationEndCallback);\n    }\n    if (this.lazyLoadTimer) {\n      clearInterval(this.lazyLoadTimer);\n    }\n    if (this.callbackTimers.length) {\n      this.callbackTimers.forEach(timer => clearTimeout(timer));\n      this.callbackTimers = [];\n    }\n    if (window.addEventListener) {\n      window.removeEventListener(\"resize\", this.onWindowResized);\n    } else {\n      window.detachEvent(\"onresize\", this.onWindowResized);\n    }\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer);\n    }\n  };\n  componentWillReceiveProps = nextProps => {\n    let spec = {\n      listRef: this.list,\n      trackRef: this.track,\n      ...nextProps,\n      ...this.state\n    };\n    let setTrackStyle = false;\n    for (let key of Object.keys(this.props)) {\n      if (!nextProps.hasOwnProperty(key)) {\n        setTrackStyle = true;\n        break;\n      }\n      if (\n        typeof nextProps[key] === \"object\" ||\n        typeof nextProps[key] === \"function\"\n      ) {\n        continue;\n      }\n      if (nextProps[key] !== this.props[key]) {\n        setTrackStyle = true;\n        break;\n      }\n    }\n    this.updateState(spec, setTrackStyle, () => {\n      if (this.state.currentSlide >= React.Children.count(nextProps.children)) {\n        this.changeSlide({\n          message: \"index\",\n          index:\n            React.Children.count(nextProps.children) - nextProps.slidesToShow,\n          currentSlide: this.state.currentSlide\n        });\n      }\n      if (nextProps.autoplay) {\n        this.autoPlay(\"update\");\n      } else {\n        this.pause(\"paused\");\n      }\n    });\n  };\n  componentDidUpdate = () => {\n    this.checkImagesLoad();\n    this.props.onReInit && this.props.onReInit();\n    if (this.props.lazyLoad) {\n      let slidesToLoad = getOnDemandLazySlides({\n        ...this.props,\n        ...this.state\n      });\n      if (slidesToLoad.length > 0) {\n        this.setState(prevState => ({\n          lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n        }));\n        if (this.props.onLazyLoad) {\n          this.props.onLazyLoad(slidesToLoad);\n        }\n      }\n    }\n    // if (this.props.onLazyLoad) {\n    //   this.props.onLazyLoad([leftMostSlide])\n    // }\n    this.adaptHeight();\n  };\n  onWindowResized = setTrackStyle => {\n    if (this.debouncedResize) this.debouncedResize.cancel();\n    this.debouncedResize = debounce(() => this.resizeWindow(setTrackStyle), 50);\n    this.debouncedResize();\n  };\n  resizeWindow = (setTrackStyle = true) => {\n    if (!ReactDOM.findDOMNode(this.track)) return;\n    let spec = {\n      listRef: this.list,\n      trackRef: this.track,\n      ...this.props,\n      ...this.state\n    };\n    this.updateState(spec, setTrackStyle, () => {\n      if (this.props.autoplay) this.autoPlay(\"update\");\n      else this.pause(\"paused\");\n    });\n    // animating state should be cleared while resizing, otherwise autoplay stops working\n    this.setState({\n      animating: false\n    });\n    clearTimeout(this.animationEndCallback);\n    delete this.animationEndCallback;\n  };\n  updateState = (spec, setTrackStyle, callback) => {\n    let updatedState = initializedState(spec);\n    spec = { ...spec, ...updatedState, slideIndex: updatedState.currentSlide };\n    let targetLeft = getTrackLeft(spec);\n    spec = { ...spec, left: targetLeft };\n    let trackStyle = getTrackCSS(spec);\n    if (\n      setTrackStyle ||\n      React.Children.count(this.props.children) !==\n        React.Children.count(spec.children)\n    ) {\n      updatedState[\"trackStyle\"] = trackStyle;\n    }\n    this.setState(updatedState, callback);\n  };\n\n  ssrInit = () => {\n    if (this.props.variableWidth) {\n      let trackWidth = 0,\n        trackLeft = 0;\n      let childrenWidths = [];\n      let preClones = getPreClones({\n        ...this.props,\n        ...this.state,\n        slideCount: this.props.children.length\n      });\n      let postClones = getPostClones({\n        ...this.props,\n        ...this.state,\n        slideCount: this.props.children.length\n      });\n      this.props.children.forEach(child => {\n        childrenWidths.push(child.props.style.width);\n        trackWidth += child.props.style.width;\n      });\n      for (let i = 0; i < preClones; i++) {\n        trackLeft += childrenWidths[childrenWidths.length - 1 - i];\n        trackWidth += childrenWidths[childrenWidths.length - 1 - i];\n      }\n      for (let i = 0; i < postClones; i++) {\n        trackWidth += childrenWidths[i];\n      }\n      for (let i = 0; i < this.state.currentSlide; i++) {\n        trackLeft += childrenWidths[i];\n      }\n      let trackStyle = {\n        width: trackWidth + \"px\",\n        left: -trackLeft + \"px\"\n      };\n      if (this.props.centerMode) {\n        let currentWidth = `${childrenWidths[this.state.currentSlide]}px`;\n        trackStyle.left = `calc(${\n          trackStyle.left\n        } + (100% - ${currentWidth}) / 2 ) `;\n      }\n      this.setState({\n        trackStyle\n      });\n      return;\n    }\n    let childrenCount = React.Children.count(this.props.children);\n    const spec = { ...this.props, ...this.state, slideCount: childrenCount };\n    let slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;\n    let trackWidth = 100 / this.props.slidesToShow * slideCount;\n    let slideWidth = 100 / slideCount;\n    let trackLeft =\n      -slideWidth *\n      (getPreClones(spec) + this.state.currentSlide) *\n      trackWidth /\n      100;\n    if (this.props.centerMode) {\n      trackLeft += (100 - slideWidth * trackWidth / 100) / 2;\n    }\n    let trackStyle = {\n      width: trackWidth + \"%\",\n      left: trackLeft + \"%\"\n    };\n    this.setState({\n      slideWidth: slideWidth + \"%\",\n      trackStyle: trackStyle\n    });\n  };\n  checkImagesLoad = () => {\n    let images = document.querySelectorAll(\".slick-slide img\");\n    let imagesCount = images.length,\n      loadedCount = 0;\n    Array.prototype.forEach.call(images, image => {\n      const handler = () =>\n        ++loadedCount && loadedCount >= imagesCount && this.onWindowResized();\n      if (!image.onclick) {\n        image.onclick = () => image.parentNode.focus();\n      } else {\n        const prevClickHandler = image.onclick;\n        image.onclick = () => {\n          prevClickHandler();\n          image.parentNode.focus();\n        };\n      }\n      if (!image.onload) {\n        if (this.props.lazyLoad) {\n          image.onload = () => {\n            this.adaptHeight();\n            this.callbackTimers.push(\n              setTimeout(this.onWindowResized, this.props.speed)\n            );\n          };\n        } else {\n          image.onload = handler;\n          image.onerror = () => {\n            handler();\n            this.props.onLazyLoadError && this.props.onLazyLoadError();\n          };\n        }\n      }\n    });\n  };\n  progressiveLazyLoad = () => {\n    let slidesToLoad = [];\n    const spec = { ...this.props, ...this.state };\n    for (\n      let index = this.state.currentSlide;\n      index < this.state.slideCount + getPostClones(spec);\n      index++\n    ) {\n      if (this.state.lazyLoadedList.indexOf(index) < 0) {\n        slidesToLoad.push(index);\n        break;\n      }\n    }\n    for (\n      let index = this.state.currentSlide - 1;\n      index >= -getPreClones(spec);\n      index--\n    ) {\n      if (this.state.lazyLoadedList.indexOf(index) < 0) {\n        slidesToLoad.push(index);\n        break;\n      }\n    }\n    if (slidesToLoad.length > 0) {\n      this.setState(state => ({\n        lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)\n      }));\n      if (this.props.onLazyLoad) {\n        this.props.onLazyLoad(slidesToLoad);\n      }\n    } else {\n      if (this.lazyLoadTimer) {\n        clearInterval(this.lazyLoadTimer);\n        delete this.lazyLoadTimer;\n      }\n    }\n  };\n  slideHandler = (index, dontAnimate = false) => {\n    const {\n      asNavFor,\n      beforeChange,\n      onLazyLoad,\n      speed,\n      afterChange\n    } = this.props;\n    // capture currentslide before state is updated\n    const currentSlide = this.state.currentSlide;\n    let { state, nextState } = slideHandler({\n      index,\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      useCSS: this.props.useCSS && !dontAnimate\n    });\n    if (!state) return;\n    beforeChange && beforeChange(currentSlide, state.currentSlide);\n    let slidesToLoad = state.lazyLoadedList.filter(\n      value => this.state.lazyLoadedList.indexOf(value) < 0\n    );\n    onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);\n    this.setState(state, () => {\n      asNavFor &&\n        asNavFor.innerSlider.slideHandler(index);\n      if (!nextState) return;\n      this.animationEndCallback = setTimeout(() => {\n        const { animating, ...firstBatch } = nextState;\n        this.setState(firstBatch, () => {\n          this.callbackTimers.push(\n            setTimeout(() => this.setState({ animating }), 10)\n          );\n          afterChange && afterChange(state.currentSlide);\n          delete this.animationEndCallback;\n        });\n      }, speed);\n    });\n  };\n  changeSlide = (options, dontAnimate = false) => {\n    const spec = { ...this.props, ...this.state };\n    let targetSlide = changeSlide(spec, options);\n    if (targetSlide !== 0 && !targetSlide) return;\n    if (dontAnimate === true) {\n      this.slideHandler(targetSlide, dontAnimate);\n    } else {\n      this.slideHandler(targetSlide);\n    }\n  };\n  clickHandler = e => {\n    if (this.clickable === false) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n    this.clickable = true;\n  };\n  keyHandler = e => {\n    let dir = keyHandler(e, this.props.accessibility, this.props.rtl);\n    dir !== \"\" && this.changeSlide({ message: dir });\n  };\n  selectHandler = options => {\n    this.changeSlide(options);\n  };\n  disableBodyScroll = () => {\n    const preventDefault = e => {\n      e = e || window.event;\n      if (e.preventDefault) e.preventDefault();\n      e.returnValue = false;\n    };\n    window.ontouchmove = preventDefault;\n  };\n  enableBodyScroll = () => {\n    window.ontouchmove = null;\n  };\n  swipeStart = e => {\n    if (this.props.verticalSwiping) {\n      this.disableBodyScroll();\n    }\n    let state = swipeStart(e, this.props.swipe, this.props.draggable);\n    state !== \"\" && this.setState(state);\n  };\n  swipeMove = e => {\n    let state = swipeMove(e, {\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      listRef: this.list,\n      slideIndex: this.state.currentSlide\n    });\n    if (!state) return;\n    if (state[\"swiping\"]) {\n      this.clickable = false;\n    }\n    this.setState(state);\n  };\n  swipeEnd = e => {\n    let state = swipeEnd(e, {\n      ...this.props,\n      ...this.state,\n      trackRef: this.track,\n      listRef: this.list,\n      slideIndex: this.state.currentSlide\n    });\n    if (!state) return;\n    let triggerSlideHandler = state[\"triggerSlideHandler\"];\n    delete state[\"triggerSlideHandler\"];\n    this.setState(state);\n    if (triggerSlideHandler === undefined) return;\n    this.slideHandler(triggerSlideHandler);\n    if (this.props.verticalSwiping) {\n      this.enableBodyScroll();\n    }\n  };\n  slickPrev = () => {\n    // this and fellow methods are wrapped in setTimeout\n    // to make sure initialize setState has happened before\n    // any of such methods are called\n    this.callbackTimers.push(\n      setTimeout(() => this.changeSlide({ message: \"previous\" }), 0)\n    );\n  };\n  slickNext = () => {\n    this.callbackTimers.push(\n      setTimeout(() => this.changeSlide({ message: \"next\" }), 0)\n    );\n  };\n  slickGoTo = (slide, dontAnimate = false) => {\n    slide = Number(slide);\n    if (isNaN(slide)) return \"\";\n    this.callbackTimers.push(\n      setTimeout(\n        () =>\n          this.changeSlide(\n            {\n              message: \"index\",\n              index: slide,\n              currentSlide: this.state.currentSlide\n            },\n            dontAnimate\n          ),\n        0\n      )\n    );\n  };\n  play = () => {\n    var nextIndex;\n    if (this.props.rtl) {\n      nextIndex = this.state.currentSlide - this.props.slidesToScroll;\n    } else {\n      if (canGoNext({ ...this.props, ...this.state })) {\n        nextIndex = this.state.currentSlide + this.props.slidesToScroll;\n      } else {\n        return false;\n      }\n    }\n\n    this.slideHandler(nextIndex);\n  };\n\n  autoPlay = playType => {\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer);\n    }\n    const autoplaying = this.state.autoplaying;\n    if (playType === \"update\") {\n      if (\n        autoplaying === \"hovered\" ||\n        autoplaying === \"focused\" ||\n        autoplaying === \"paused\"\n      ) {\n        return;\n      }\n    } else if (playType === \"leave\") {\n      if (autoplaying === \"paused\" || autoplaying === \"focused\") {\n        return;\n      }\n    } else if (playType === \"blur\") {\n      if (autoplaying === \"paused\" || autoplaying === \"hovered\") {\n        return;\n      }\n    }\n    this.autoplayTimer = setInterval(this.play, this.props.autoplaySpeed + 50);\n    this.setState({ autoplaying: \"playing\" });\n  };\n  pause = pauseType => {\n    if (this.autoplayTimer) {\n      clearInterval(this.autoplayTimer);\n      this.autoplayTimer = null;\n    }\n    const autoplaying = this.state.autoplaying;\n    if (pauseType === \"paused\") {\n      this.setState({ autoplaying: \"paused\" });\n    } else if (pauseType === \"focused\") {\n      if (autoplaying === \"hovered\" || autoplaying === \"playing\") {\n        this.setState({ autoplaying: \"focused\" });\n      }\n    } else {\n      // pauseType  is 'hovered'\n      if (autoplaying === \"playing\") {\n        this.setState({ autoplaying: \"hovered\" });\n      }\n    }\n  };\n  onDotsOver = () => this.props.autoplay && this.pause(\"hovered\");\n  onDotsLeave = () =>\n    this.props.autoplay &&\n    this.state.autoplaying === \"hovered\" &&\n    this.autoPlay(\"leave\");\n  onTrackOver = () => this.props.autoplay && this.pause(\"hovered\");\n  onTrackLeave = () =>\n    this.props.autoplay &&\n    this.state.autoplaying === \"hovered\" &&\n    this.autoPlay(\"leave\");\n  onSlideFocus = () => this.props.autoplay && this.pause(\"focused\");\n  onSlideBlur = () =>\n    this.props.autoplay &&\n    this.state.autoplaying === \"focused\" &&\n    this.autoPlay(\"blur\");\n\n  render = () => {\n    var className = classnames(\"slick-slider\", this.props.className, {\n      \"slick-vertical\": this.props.vertical,\n      \"slick-initialized\": true\n    });\n    let spec = { ...this.props, ...this.state };\n    let trackProps = extractObject(spec, [\n      \"fade\",\n      \"cssEase\",\n      \"speed\",\n      \"infinite\",\n      \"centerMode\",\n      \"focusOnSelect\",\n      \"currentSlide\",\n      \"lazyLoad\",\n      \"lazyLoadedList\",\n      \"rtl\",\n      \"slideWidth\",\n      \"slideHeight\",\n      \"listHeight\",\n      \"vertical\",\n      \"slidesToShow\",\n      \"slidesToScroll\",\n      \"slideCount\",\n      \"trackStyle\",\n      \"variableWidth\",\n      \"unslick\",\n      \"centerPadding\"\n    ]);\n    const { pauseOnHover } = this.props;\n    trackProps = {\n      ...trackProps,\n      onMouseEnter: pauseOnHover ? this.onTrackOver : null,\n      onMouseLeave: pauseOnHover ? this.onTrackLeave : null,\n      onMouseOver: pauseOnHover ? this.onTrackOver : null,\n      focusOnSelect: this.props.focusOnSelect ? this.selectHandler : null\n    };\n\n    var dots;\n    if (\n      this.props.dots === true &&\n      this.state.slideCount >= this.props.slidesToShow\n    ) {\n      let dotProps = extractObject(spec, [\n        \"dotsClass\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"currentSlide\",\n        \"slidesToScroll\",\n        \"clickHandler\",\n        \"children\",\n        \"customPaging\",\n        \"infinite\",\n        \"appendDots\"\n      ]);\n      const { pauseOnDotsHover } = this.props;\n      dotProps = {\n        ...dotProps,\n        clickHandler: this.changeSlide,\n        onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,\n        onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,\n        onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null\n      };\n      dots = <Dots {...dotProps} />;\n    }\n\n    var prevArrow, nextArrow;\n    let arrowProps = extractObject(spec, [\n      \"infinite\",\n      \"centerMode\",\n      \"currentSlide\",\n      \"slideCount\",\n      \"slidesToShow\",\n      \"prevArrow\",\n      \"nextArrow\"\n    ]);\n    arrowProps.clickHandler = this.changeSlide;\n\n    if (this.props.arrows) {\n      prevArrow = <PrevArrow {...arrowProps} />;\n      nextArrow = <NextArrow {...arrowProps} />;\n    }\n\n    var verticalHeightStyle = null;\n\n    if (this.props.vertical) {\n      verticalHeightStyle = {\n        height: this.state.listHeight\n      };\n    }\n\n    var centerPaddingStyle = null;\n\n    if (this.props.vertical === false) {\n      if (this.props.centerMode === true) {\n        centerPaddingStyle = {\n          padding: \"0px \" + this.props.centerPadding\n        };\n      }\n    } else {\n      if (this.props.centerMode === true) {\n        centerPaddingStyle = {\n          padding: this.props.centerPadding + \" 0px\"\n        };\n      }\n    }\n\n    const listStyle = { ...verticalHeightStyle, ...centerPaddingStyle };\n    const touchMove = this.props.touchMove;\n    let listProps = {\n      className: \"slick-list\",\n      style: listStyle,\n      onClick: this.clickHandler,\n      onMouseDown: touchMove ? this.swipeStart : null,\n      onMouseMove: this.state.dragging && touchMove ? this.swipeMove : null,\n      onMouseUp: touchMove ? this.swipeEnd : null,\n      onMouseLeave: this.state.dragging && touchMove ? this.swipeEnd : null,\n      onTouchStart: touchMove ? this.swipeStart : null,\n      onTouchMove: this.state.dragging && touchMove ? this.swipeMove : null,\n      onTouchEnd: touchMove ? this.swipeEnd : null,\n      onTouchCancel: this.state.dragging && touchMove ? this.swipeEnd : null,\n      onKeyDown: this.props.accessibility ? this.keyHandler : null\n    };\n\n    let innerSliderProps = {\n      className: className,\n      dir: \"ltr\"\n    };\n\n    if (this.props.unslick) {\n      listProps = { className: \"slick-list\" };\n      innerSliderProps = { className };\n    }\n    return (\n      <div {...innerSliderProps}>\n        {!this.props.unslick ? prevArrow : \"\"}\n        <div ref={this.listRefHandler} {...listProps}>\n          <Track ref={this.trackRefHandler} {...trackProps}>\n            {this.props.children}\n          </Track>\n        </div>\n        {!this.props.unslick ? nextArrow : \"\"}\n        {!this.props.unslick ? dots : \"\"}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}